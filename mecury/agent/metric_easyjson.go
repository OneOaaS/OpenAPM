// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package agent

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson_9478868c_decode_github_com_corego_vgo_mecury_agent_Metrics(in *jlexer.Lexer, out *Metrics) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "d":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Data = make([]*MetricData, 0, 8)
			} else {
				out.Data = nil
			}
			for !in.IsDelim(']') {
				var v1 *MetricData
				if in.IsNull() {
					in.Skip()
					v1 = nil
				} else {
					v1 = new(MetricData)
					easyjson_9478868c_decode_github_com_corego_vgo_mecury_agent_MetricData(in, &*v1)
				}
				out.Data = append(out.Data, v1)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_9478868c_encode_github_com_corego_vgo_mecury_agent_Metrics(out *jwriter.Writer, in Metrics) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"d\":")
	out.RawByte('[')
	for v2, v3 := range in.Data {
		if v2 > 0 {
			out.RawByte(',')
		}
		if v3 == nil {
			out.RawString("null")
		} else {
			easyjson_9478868c_encode_github_com_corego_vgo_mecury_agent_MetricData(out, *v3)
		}
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v Metrics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_9478868c_encode_github_com_corego_vgo_mecury_agent_Metrics(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Metrics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_9478868c_encode_github_com_corego_vgo_mecury_agent_Metrics(w, v)
}
func (v *Metrics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_9478868c_decode_github_com_corego_vgo_mecury_agent_Metrics(&r, v)
	return r.Error()
}
func (v *Metrics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_9478868c_decode_github_com_corego_vgo_mecury_agent_Metrics(l, v)
}
func easyjson_9478868c_decode_github_com_corego_vgo_mecury_agent_MetricData(in *jlexer.Lexer, out *MetricData) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "n":
			out.Name = string(in.String())
		case "ts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Tags)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "f":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Fields = make(map[string]interface{})
				} else {
					out.Fields = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					v5 = in.Interface()
					(out.Fields)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "t":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_9478868c_encode_github_com_corego_vgo_mecury_agent_MetricData(out *jwriter.Writer, in MetricData) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"n\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ts\":")
	if in.Tags == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v6_first := true
		for v6_name, v6_value := range in.Tags {
			if !v6_first {
				out.RawByte(',')
			}
			v6_first = false
			out.String(string(v6_name))
			out.RawByte(':')
			out.String(string(v6_value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"f\":")
	if in.Fields == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v7_first := true
		for v7_name, v7_value := range in.Fields {
			if !v7_first {
				out.RawByte(',')
			}
			v7_first = false
			out.String(string(v7_name))
			out.RawByte(':')
			out.Raw(json.Marshal(v7_value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"t\":")
	out.Raw((in.Time).MarshalJSON())
	out.RawByte('}')
}
